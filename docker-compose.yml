services:
    postgres:
        image: postgres:16-alpine
        container_name: trainer_db
        restart: always
        env_file:
            - .env
        ports:
            - '5430:5432'
        volumes:
            - ./db-volumes/database/postgres:/var/lib/postgresql/data
    trainer_service:
        container_name: trainer_service
        restart: on-failure
        build:
            context: ./
            dockerfile: ./Dockerfile_${NODE_ENV}
        # expose:
        #     - ${PORT}
        ports:
            - '${PORT}:8080'
        env_file:
            - .env
        volumes:
            - ./node_modules:/app/node_modules
            - ./var/log:/var/trainer/log
            - ./:/app
        healthcheck:
            test: ['CMD', 'nc', '-z', 'localhost', '8080']
            interval: 30s
            retries: 3
            start_period: 30s
            timeout: 10s
        depends_on:
            - postgres

    nginx:
        container_name: nginx
        restart: on-failure
        build:
            context: ./nginx
            dockerfile: Dockerfile
        ports:
            - ${NGINX_PORT}:80
        #            - '443:443'
        env_file:
            - .env
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
            - ./nginx/templates/default.conf.template:/etc/nginx/templates/default.conf.template
            - ./nginx/logs:/var/log/nginx
        depends_on:
            - trainer_service
            - postgres
networks:
    backend:
        driver: bridge
